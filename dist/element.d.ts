import { Node } from "./node.js";
import { ParentNode } from "./parent-node.js";
declare const DATASET: unique symbol;
export declare class Element extends ParentNode {
    #private;
    _parsed_closed?: boolean;
    localName: string;
    _tag?: string;
    _ns?: string;
    _prefix?: string;
    [DATASET]?: any;
    constructor(name: string, ns?: string, prefix?: string, tag?: string);
    get qualifiedName(): string;
    get prefix(): string | null;
    get namespaceURI(): string | null;
    get nodeType(): number;
    get nodeName(): string;
    get tagName(): string;
    get id(): string;
    set id(id: string);
    get className(): string;
    set className(str: string);
    getAttribute(name: string): string | null;
    _popAttribute(name: string): string | undefined;
    getAttributeNS(ns: string | null, localName: string): string | null;
    getAttributeNode(name: string): Attr | null;
    _popAttributeNode(name: string): Attr | null;
    _newAttributeNode(name: string): Attr;
    _newAttributeNodeNS(nsu: string | null, name: string, localName: string): Attr;
    _letAttributeNode(name: string): Attr;
    getAttributeNodeNS(nsu: string | null, localName: string): Attr | null;
    setAttribute(name: string, value: string): void;
    _letAttributeNodeNS(nms: string | null, qname: string): Attr;
    setAttributeNS(nms: string | null, qname: string, value: string): void;
    setAttributeNode(node: Attr): Attr | null;
    setAttributeNodeNS(node: Attr): Attr | null;
    removeAttribute(qName: string): void;
    removeAttributeNS(ns: string | null, localName: string): void;
    removeAttributeNode(node: Attr): void;
    hasAttribute(name: string): boolean;
    hasAttributes(): boolean | undefined;
    hasAttributeNS(ns: string, localName: string): boolean;
    toggleAttribute(name: string, force?: boolean): boolean;
    get attributes(): Element;
    getAttributeNames(): string[];
    matches(selectors: string): boolean;
    closest(selectors: string): Element | null;
    get innerText(): string | null;
    lookupNamespaceURI(prefix: string): string | null;
    lookupPrefix(ns: string): string | null;
    isDefaultNamespace(namespaceURI: string): boolean;
    insertAdjacentElement(position: string, element: ChildNode): ChildNode | null;
    insertAdjacentText(position: string, text: string): void;
    get _styleAttr(): StyleAttr;
    get style(): any;
    set style(value: any);
    get attributeStyleMap(): any;
    computedStyleMap(): any;
    get classList(): import("./token-list.js").DOMTokenList;
    get dataset(): any;
    cloneNode(deep?: boolean): ParentNode;
    isEqualNode(node: Node): boolean;
    _ensureId(): string;
}
import { Attr } from "./attr.js";
import { ChildNode } from "./child-node.js";
import { StyleAttr } from "./attr-style.js";
import { NamedNodeMap } from "./named-node-map.js";
export { NamedNodeMap };
